# Aliases for the git command

# optional name of program
command = git

# The default pager settings
pager =

# Use st as an alias for a longer command
<alias st>

#	The command alias
	sub = st

#	This specifies post processing commands placed after the pipe (|)
#	post = grep blah

#	Any pre processing commands, placed before an and (&&)
#	pre = time

#	This specifies that the output should be checked for length and if it is
#	more than one page then the pager supplied is uesd if set to yes $PAGER is used
#	pager = yes | more | less

</alias>
<alias rev>
    sub =
    command = gitrev
</alias>
#<alias revert>
#    sub = rev
#</alias>
<alias spull>
    sub = svn rebase
    pre_cmd = git stash save 'git svn stash for svn rebase'
#    post_cmd = git stash pop
</alias>
<alias spush>
    sub = svn dcommit
    pre_cmd = git stash save 'git svn stash for svn dcommit'
#    post_cmd = git stash pop
</alias>
<alias cpull>
    sub = cvsimport
#    pre_cmd = git stash save 'git svn stash for svn rebase'
#    post_cmd = git stash pop
</alias>
<alias cpush>
    sub = cvsexportcommit
#    pre_cmd = git stash save 'git svn stash for svn dcommit'
#    post_cmd = git stash pop
</alias>
<alias list>
    sub = stash list
</alias>
<alias new-branch>
    sub = dead
    pre_perl = <<END
my (undef, $branch) = @ARGV;
if ( !$ENV{new}++ ) {
    #system "git push origin origin:refs/heads/$branch\n";
    #system "git fetch origin\n";
    #system "git checkout -b $branch --track origin/$branch\n";
    #system "git pull\n";
    system "git checkout -b $branch\n";
    system "git push -u origin $branch\n";
}
return 0;
END
</alias>
<alias gdl-release>
    sub = dead
    pre_perl = <<END
my (undef, $old, $new) = @ARGV;

if (!$old) {
    my $cmd = "grep -P '^\\\\S+\\\\s[(]\\\\d+[.]\\\\d+[.]\\\\d+[)]' debian/changelog | head -n 1";
    $old = `$cmd`;
    chomp $old;
    $old =~ s/^.*?[(]([^)]+).*$/$1/;
    $new = $old;
    $new =~ s/(\d+)$/$1 + 1/exms;
    warn "git gdl-release $old $new\n";
    return 0;
}
if ( $old && $new ) {
    print <<"CMD";
git checkout master;
git dch --auto --release;
git tag -a -m "Tagging release $old" "$old"
git commit -m"Release $old" debian/changelog;
git checkout stable;
git merge master;
git checkout master;
git dch --auto --new-version $new;
git commit -m"New version $new" debian/changelog;
CMD
}
warn "Now (if you are happy) run:\ngit push --tags\n";

return 0;
END
</alias>

<alias repush>
    sub = push
    pre_cmd = git pull --rebase
#    post_cmd = git stash pop
</alias>

<alias cows>
    description = "Checkout whitespace only changed files"
    sub = dead
    pre_perl = <<PERL
my @files = map {
        s/^#\s+modified:\s+//;
        $_;
    }
    grep { /^#\s+modified:\s+/ }
    map { chomp; $_ }
    `git status`;

for my $file (@files) {
    my $diff = `git diff --ignore-all-space $file`;
    chomp $diff;

    if ( !$diff ) {
        warn "\t$file\n";
        system 'git', 'checkout', $file;
    }
}

PERL

</alias>

<alias branch_bau>
    description = "Create a new BAU branch from the lastest prod tag"
    #sub = branch
    pre_perl = <<PERL
    my ($cmd) = shift;

    my $prod_tag = `git tag | grep -P '^prod/' | sort -n | tail -n 1`;
    chomp $prod_tag;

    $$cmd =~ s/branch_bau/checkout -b/;
    ($ENV{branch}) = $$cmd =~ /-b\s+(\w+)/;
    return $$cmd = "$$cmd $prod_tag";

PERL

    post_perl = <<PERL
    my $cmd = "git push --set-upstream origin/$ENV{branch}";
    warn "Run?\n$cmd\n";
    #`$cmd`;
PERL
</alias>

<alias bau_branch>
    sub = branch_bau
</alias>

<alias prod>
    sub = dead
    pre_perl = <<PERL

    system "git tag | grep -P '^prod/' | sort -n | tail -n 1";

    return;
PERL
</alias>

<alias lgg>
    sub = log --format=format:'	%Cred%h%Creset %s %Cgreen%an %C(red bold)%ai%Creset %C(blue bold)%d' --graph
    post = grep -P '^[*][^|\\\\]+[a-f0-9]' --color=NEVER
</alias>

<alias lgs>
    sub = lgp --name-status -n 20
</alias>

<alias jira>

    sub = dead
    pre_perl = <<PERL
    my (undef, $jira) = @ARGV;
    $jira =~ s/-/_/;
    $jira = lc $jira;
    my ($branch) = grep {s/^[*]?\s+//; /^(\w+_)?$jira/} `git branch`;

    if ($branch) {
        chomp $branch;
        system qw/git checkout/, $branch;
    }
    else {
        my ($remote_branch) = grep {s/^\s+//; /^origin\/(\w+_)?$jira/} `git branch -r`;
        if ($remote_branch) {
            chomp $remote_branch;
            $branch = $remote_branch;
            $branch =~ s{^origin/}{};
            system qw/git checkout -b/, $branch, '--track', $remote_branch;
        }
        else {
            warn "No branch for jira $jira exists!\n";
            warn "Create with one of the following:\n";
            warn "git checkout -b shop_$jira\_...\n";
            warn "git checkout -b care_$jira\_...\n";
            warn "git checkout -b mobi_$jira\_...\n";
        }
    }


    return;
PERL
</alias>

<alias release>
    sub = dead
    pre_perl = <<PERL
    my (undef, $project) = @ARGV;
    $project = $project ? $project . '_' : '';
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime;
    $year += 1900;
    my $sorter = sub {
        my $A = $a;
        $A =~ s/(\d+)/sprintf "%06d", $1/egxms;
        my $B = $b;
        $B =~ s/(\d+)/sprintf "%06d", $1/egxms;
        return $A cmp $B;
    };
    my @branch = grep {/^${project}release_$year/} map {s/^[*]?\s+//} `git branch`;
    #my ($branch) = grep {/^${project}release_$year/} map {s/^[*]?\s+//} `git branch`;
    warn join "\n", @branch;

    return;
PERL
</alias>


